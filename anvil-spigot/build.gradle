plugins {
    id 'java'
}

jar.enabled = false // we only want shadowJar

repositories {
    maven { url "https://hub.spigotmc.org/nexus/content/repositories/snapshots" }
}

dependencies {
    if (rootProject.getName().equals("Anvil")) {
        implementation project(':anvil-api')
        implementation project(':anvil-common')
    } else {
        implementation project(':Anvil:anvil-api')
        implementation project(':Anvil:anvil-common')
    }

    implementation configurate_hocon
    implementation guice
    implementation javasisst
    implementation(kotlin_reflect + ":" + kotlin_version)
    implementation(kotlin_stdlib + ":" + kotlin_version)
    implementation(kotlin_stdlib7 + ":" + kotlin_version)
    implementation(kotlin_stdlib8 + ":" + kotlin_version)
    implementation(kotlinx_coroutines)
    implementation(kotlinx_coroutines_core)
    implementation(kotlinx_coroutines_jvm)
    implementation(kotlinx_serialization)
    implementation(ktor_cio)
    implementation(ktor_core)
    implementation(ktor_http)
    implementation(ktor_http_jvm)
    implementation(ktor_network)
    implementation(ktor_network_jvm)
    implementation(ktor_utils)
    implementation(kyori_api)
    implementation(kyori_bukkit_serializer)
    implementation(kyori_examination)
    implementation(kyori_key)
    implementation(kyori_legacy_serializer)
    implementation(kyori_gson_serializer)
    implementation(kyori_gson_legacy)
    implementation(kyori_platform)
    implementation microutils_logging
    implementation mongo_java_driver
    implementation spigot
    implementation typesafe_config
}

shadowJar {
    String jarName = "Anvil-Spigot-${project.version}.jar"
    println "Building: " + jarName
    archiveFileName = jarName

    dependencies {
        if (rootProject.getName().equals("Anvil")) {
            include project(':anvil-api')
            include project(':anvil-common')
        } else {
            include project(':Anvil:anvil-api')
            include project(':Anvil:anvil-common')
        }

        relocate("net.kyori", "relocated.net.kyori")
        include dependency(apache_commons)
        include dependency(aopalliance)
        include dependency(bson)
        include dependency(configurate_core)
        include dependency(configurate_hocon)
        include dependency(guice)
        include dependency(javasisst)
        include dependency(javax)
        include dependency(jedis)
        include dependency(kotlin_reflect)
        include dependency(kotlin_stdlib)
        include dependency(kotlin_stdlib7)
        include dependency(kotlin_stdlib8)
        include dependency(kotlinx_coroutines)
        include dependency(kotlinx_coroutines_core)
        include dependency(kotlinx_coroutines_jvm)
        include dependency(kotlinx_serialization)
        include dependency(ktor_core)
        include dependency(ktor_cio)
        include dependency(ktor_http)
        include dependency(ktor_http_jvm)
        include dependency(ktor_io)
        include dependency(ktor_network)
        include dependency(ktor_network_jvm)
        include dependency(ktor_utils)
        include dependency(kyori_api)
        include dependency(kyori_examination)
        include dependency(kyori_key)
        include dependency(kyori_nbt)
        include dependency(kyori_bukkit_serializer)
        include dependency(kyori_gson_serializer)
        include dependency(kyori_gson_legacy)
        include dependency(kyori_legacy_serializer)
        include dependency(kyori_plain_serializer)
        include dependency(microutils_logging)
        include dependency(mongo_java_driver)
        include dependency(mongodb_driver_sync)
        include dependency(morphia)
        include dependency(reflections)
        include dependency(slf4j)
        include dependency(sponge_math)
        include dependency(typesafe_config)
        include dependency(xodus)
        include dependency(xodus_entity_store)
        include dependency(xodus_environment)
        include dependency(xodus_utils)
    }
}

artifacts {
    archives shadowJar
}
